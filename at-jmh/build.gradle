plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    alias libs.plugins.licenser
    alias libs.plugins.gradleutils
}

configurations {
    dependencyScope('jmuRuntimeOnly')

    resolvable('jmhRuntimeClasspath') {
        extendsFrom jmuRuntimeOnly
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

dependencies {
    implementation rootProject
    implementation testLibs.jmh.core
    implementation libs.asm

    jmuRuntimeOnly sourceSets.main.output
    jmuRuntimeOnly testLibs.bundles.jmh

    annotationProcessor testLibs.jmh.generator.annprocess
}

tasks.register('jmh', JavaExec) {
    dependsOn rootProject.tasks.named('check')
    dependsOn sourceSets.main.output

    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(17) }
    jvmArgs = [
        '-p', sourceSets.main.runtimeClasspath.asPath,
        '--add-modules', 'ALL-MODULE-PATH',
    ]
    classpath = configurations.jmhRuntimeClasspath
    mainClass = 'org.openjdk.jmh.Main'

    args '-bm', 'avgt'  // benchmark mode
    args '-r', '5s' // iteration time
    args '-w', '5s' // warmup time
    args '-wi', '2' // warmup iterations

    // profilers
    //args '-prof', 'stack'
    args '-prof', "jfr:dir=${project.layout.buildDirectory.asFile.get()}/jfr"

    args '-tu', 'us' // time unit
    args '-i', '2' // iterations
    args '-f', '1' // forks
    args '-rff', "${rootProject.layout.buildDirectory.asFile.get()}/jmh_results.txt" // results file
    args 'net.minecraftforge.accesstransformer.benchmarks.AccessTransformerListBenchmark'
}
