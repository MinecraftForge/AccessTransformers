plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    alias libs.plugins.licenser
    alias libs.plugins.gradleutils
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
}

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
}

tasks.named('test', Test) {
    useJUnitPlatform()
    reports.html.outputLocation = rootProject.layout.buildDirectory.dir('reports')
    reports.junitXml.outputLocation = rootProject.layout.buildDirectory.dir('test-results')
}

dependencies {
    testImplementation rootProject
    testImplementation project(':at-mlservice')
    testImplementation project(':at-test-jar')
    testImplementation testLibs.junit.api
    testImplementation testLibs.unsafe
    testImplementation libs.securemodules
    testImplementation libs.modlauncher
    testImplementation libs.asm
    testImplementation libs.asm.tree
    testImplementation libs.jopt
    testImplementation libs.log4j.api
    testImplementation libs.log4j.core
    testImplementation testLibs.gson
    testRuntimeOnly testLibs.bundles.junit.runtime
    testCompileOnly libs.nulls
}

final testAll = tasks.register('testAll', AggregateTest) {
    input = file('build/test-results/')
    output = rootProject.file('test_results.html')
}

def testFor(String javaVendor, int javaVersion, File output) {
    tasks.<Test>register("test${javaVendor}${javaVersion}", Test) {
        useJUnitPlatform()
        classpath = sourceSets.test.runtimeClasspath
        testClassesDirs = sourceSets.test.output.classesDirs
        javaLauncher = javaToolchains.launcherFor {
            vendor = JvmVendorSpec.of(javaVendor.toUpperCase(Locale.ROOT))
            languageVersion = JavaLanguageVersion.of(javaVersion)
            implementation = JvmImplementation.VENDOR_SPECIFIC
        }
        reports.html.outputLocation = layout.buildDirectory.dir("test-reports/${javaVendor}-${javaVersion}")
        reports.junitXml.outputLocation = output
    }
}

(VALID_VMS as Map<String, List<Integer>>).each { javaVendor, javaVersions ->
    javaVersions.each { javaVersion ->
        def output = file("build/test-results/${javaVendor}-${javaVersion}/")
        output.mkdirs()
        def task = testFor(javaVendor, javaVersion, output)
        testAll.configure {
            inputs.dir(output)
            dependsOn(task)
            mustRunAfter(task)
        }
    }
}