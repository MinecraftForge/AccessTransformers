buildscript {
    repositories {
        mavenCentral()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group 'cpw.mods'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco {
    toolVersion = "0.7.9"
}

ext.antlr = [
        grammarpackage: "com.demonwav.primeiron",
        antlrSource: 'src/main/antlr4',
        destinationDir: "src/generated-sources/java"
]

configurations {
    antlr4 {
        description = "ANTLR4"
    }
}

task antlrOutputDir {
    mkdir antlr.destinationDir
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec)

sourceSets {
    mlservice
    testJars
    antlr4 {
        java {
            srcDir {
                antlr.destinationDir
            }
        }
    }
}

compileJava {
    dependsOn generateGrammarSource
    source antlr.destinationDir
}

clean {
    delete antlr.destinationDir
}

task mlserviceJar(type: Jar) {
    classifier = 'service'
    from sourceSets.main.output
    from sourceSets.mlservice.output
}

task testsJar(type: Jar) {
    classifier = 'testsjar'
    from sourceSets.testJars.output
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from sourceSets.mlservice.allSource
}

artifacts {
    archives jar
    archives sourcesJar
    archives testsJar
    archives mlserviceJar
}

build.dependsOn mlserviceJar

repositories {
    mavenCentral()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
}

dependencies {
    testCompile "org.junit.jupiter:junit-jupiter-api:5.0.2"
    testCompile 'org.powermock:powermock-core:1.7.3'
    testCompile 'cpw.mods:modlauncher:0.1-SNAPSHOT'
    testCompile sourceSets.mlservice.output
    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.0.2"
    testRuntime 'org.apache.logging.log4j:log4j-core:2.10.0'
    testRuntime sourceSets.testJars.runtimeClasspath

    compile 'org.antlr:antlr4-runtime:4.7.1'
    compile 'org.ow2.asm:asm:6.0'
    compile 'org.ow2.asm:asm-commons:6.0'
    compile 'org.ow2.asm:asm-tree:6.0'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'cpw.mods:modlauncher:0.1-SNAPSHOT:api'
    compile sourceSets.antlr4.output

    mlserviceCompile 'cpw.mods:modlauncher:0.1-SNAPSHOT:api'
    mlserviceCompileOnly sourceSets.main.output

    antlr4Compile 'org.antlr:antlr4:4.7.1'
}
// Shadow Jar with antlr embedded
shadowJar {
    from sourceSets.main.output
    from sourceSets.mlservice.output
    dependencies {
        exclude(dependency {
            it.moduleName != 'antlr4-runtime'
        })
    }
}
uploadArchives {
    repositories.mavenDeployer {
        if (project.hasProperty('forgeMavenPassword'))
        {
            repository(url: "http://files.minecraftforge.net/maven/manage/upload") {
                authentication(userName: project.getProperty('forgeMavenUser'), password: project.getProperty('forgeMavenPassword'))
            }
        } else {
            repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
        }
        pom {
            groupId = project.group
            artifactId = project.archivesBaseName
            project {
                name project.archivesBaseName
                packaging 'jar'
                description 'Access Transformers library'
                url 'https://github.com/cpw/accesstransformers'

                scm {
                    url 'https://github.com/cpw/accesstransformers'
                    connection 'scm:git:git://github.com/cpw/accesstransformers.git'
                    developerConnection 'scm:git:git@github.com:cpw/accesstransformers.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/cpw/accesstransformers/issues'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'cpw'
                        name 'cpw'
                        roles { role 'developer' }
                    }
                    developer {
                        id 'DemonWav'
                        name 'DemonWav'
                        roles { role 'developer' }
                    }
                }
            }
        }
    }
}

generateGrammarSource {
    description = 'Generates Java sources from ANTLR4 grammars.'
    inputs.dir file(antlr.antlrSource)
    outputs.dir file(antlr.destinationDir)
    def grammars = fileTree(antlr.antlrSource).include('**/*.g4')
    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4Compile
    def pkg = antlr.grammarpackage.replaceAll("\\.", "/")
    args = ["-o", "${antlr.destinationDir}/${pkg}", "-visitor", "-package", antlr.grammarpackage, grammars.files].flatten()
}
