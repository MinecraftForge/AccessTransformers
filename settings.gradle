plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '1.0.0'
}

rootProject.name = 'AccessTransformers'

includeBuild 'at-gradle'
includeBuild 'at-gradle-demo'
include 'at-mlservice'
include 'at-test'
include 'at-test-jar'
include 'at-jmh'

// Applying plugins causes them to not have any IDE support when also applied to any build.gradle files
// The workaround for now is to use this listener here so that it can stay in settings.gradle
// See: https://youtrack.jetbrains.com/issue/IDEA-332061/Gradle-Missing-Code-Completion-Suggestions-for-Settings-Plugins-in-Groovy-DSL
gradle.beforeProject { Project project ->
    project.pluginManager.withPlugin('net.minecraftforge.gradleutils') {
        project.repositories {
            mavenCentral()
            gradlePluginPortal()
            maven project.gradleutils.forgeMaven
            //mavenLocal()
        }
    }
}

//@formatter:off
dependencyResolutionManagement.versionCatalogs {
    register('libs') {
        plugin 'versions',    'com.github.ben-manes.versions'  version '0.53.0'
        plugin 'shadow',      'com.gradleup.shadow'            version '9.0.2'
        plugin 'licenser',    'net.minecraftforge.licenser'    version '1.2.0'
        plugin 'gradleutils', 'net.minecraftforge.gradleutils' version '3.3.18'
        plugin 'gitversion',  'net.minecraftforge.gitversion'  version '3.1.1'
        plugin 'changelog',   'net.minecraftforge.changelog'   version '3.1.2'

        version 'asm', '9.7'
        library 'asm',         'org.ow2.asm', 'asm'         versionRef 'asm'
        library 'asm-tree',    'org.ow2.asm', 'asm-tree'    versionRef 'asm'
        library 'asm-commons', 'org.ow2.asm', 'asm-commons' versionRef 'asm'
        bundle 'asm', ['asm', 'asm-tree', 'asm-commons']

        library 'jopt',  'net.sf.jopt-simple', 'jopt-simple' version '5.0.4'
        library 'nulls', 'org.jetbrains',      'annotations' version '26.0.2'

        version 'log4j', '2.19.0'
        library 'log4j-api',  'org.apache.logging.log4j', 'log4j-api'  versionRef 'log4j'
        library 'log4j-core', 'org.apache.logging.log4j', 'log4j-core' versionRef 'log4j'

        library 'modlauncher',   'net.minecraftforge', 'modlauncher'   version '10.1.1' // Needs securemodules
        library 'securemodules', 'net.minecraftforge', 'securemodules' version '2.2.2' // Needs unsafe
    }

    register('testLibs') {
        description = 'Dependencies used exclusively for testing or test projects.'

        plugin 'aggregate', 'net.minecraftforge.jvm-aggregate-test' version '0.1.5'

        library 'unsafe', 'net.minecraftforge',   'unsafe' version '0.9.2'
        library 'gson',   'com.google.code.gson', 'gson'   version '2.10.1'

        version 'junit', '5.10.2'
        library 'junit-api',               'org.junit.jupiter',  'junit-jupiter-api'       versionRef 'junit'
        library 'junit-engine',            'org.junit.jupiter',  'junit-jupiter-engine'    versionRef 'junit'
        library 'junit-platform-launcher', 'org.junit.platform', 'junit-platform-launcher' version    '1.10.2'
        bundle 'junit-runtime', ['junit-engine', 'junit-platform-launcher']

        version 'jmh', '1.37'
        library 'jmh-core',                 'org.openjdk.jmh', 'jmh-core'                 versionRef 'jmh'
        library 'jmh-generator-annprocess', 'org.openjdk.jmh', 'jmh-generator-annprocess' versionRef 'jmh'
        bundle 'jmh', ['jmh-core', 'jmh-generator-annprocess']
    }
}
//@formatter:on
